// Generated by CoffeeScript 1.6.3
(function() {
  var Animation, BadBullet, Barrier, Bullet, Bulletproto, ControlObj, Entity, HitBoxCollection, HitboxSprite, InvaderBee, PP, PlayerFairy, PowerUp, Rect, Renderable, THISFILE, Timer, V, VTOPP, WORLD, World, XXXX, animate, ascii, audiobaseurl, body, camera, clamppos, control, d6, deepExtend, eventelement, field, floweranim, fontmap, fontsrc, fonttexs, gettileoffs, hitboxcollection, hz, imgext, imgpath, intdiv, intdivmod, jame, key, makebox, maketext, maketiles, noop, playingfield, playsound, pollentiles, preload, renderer, root, screensize, settings, sourcebaseurl, sparkletiles, stage, _SPRITE, _TEXBYNAME, _blat, _charspritetick, _i, _j, _len, _maketiles, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _results, _selectframe,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Rect = halp.Rect;

  jame = {};

  THISFILE = "js/game.js";

  sourcebaseurl = "./sprites/";

  audiobaseurl = "./audio/";

  imgext = ".png";

  settings = {
    fps: 30,
    muted: true,
    paused: false,
    volume: 0.2,
    scale: 1
  };

  jame.settings = settings;

  V = function(x, y) {
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    return new V2d(x, y);
  };

  screensize = V(960, 540);

  playingfield = new Rect(0, 0, 360, 480);

  /*
  = helper functions
  */


  makebox = function(position, dimensions, anchor) {
    var truepos;
    truepos = position.vsub(dimensions.vmul(anchor));
    return new Rect(truepos.x, truepos.y, dimensions.x, dimensions.y);
  };

  d6 = function() {
    return mafs.randint(6) + 1;
  };

  /*
  deepExtend pilfered from Ryan LeFevre
  
  this is intended as a fairly generic way to
  alter default values of new objects,
  in a more data-driven way.
  
  (instead of dealing with unnamed arguments or lots of method calls
  or whatever.)
  deep so you can alter a component of an object such as coordinates
  without completely overwriting the whole object.
  
  I imagine something more like this:
    ent = new Entity pos: {x:0, y:0}, vel: {x: 0, y:32}
  */


  deepExtend = function() {
    var extenders, key, object, other, val, _i, _len;
    object = arguments[0], extenders = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (object == null) {
      return {};
    }
    for (_i = 0, _len = extenders.length; _i < _len; _i++) {
      other = extenders[_i];
      for (key in other) {
        if (!__hasProp.call(other, key)) continue;
        val = other[key];
        if ((object[key] == null) || typeof val !== "object") {
          object[key] = val;
        } else {
          object[key] = deepExtend(object[key], val);
        }
      }
    }
    return object;
  };

  noop = function() {};

  imgpath = function(basename) {
    return sourcebaseurl + basename + imgext;
  };

  _TEXBYNAME = function(imgsrc) {
    console.log(imgpath(imgsrc));
    return PIXI.Texture.fromImage(imgpath(imgsrc));
  };

  _SPRITE = function(tex) {
    return new PIXI.Sprite(tex);
  };

  PP = function(x, y) {
    return new PIXI.Point(x, y);
  };

  VTOPP = function(v) {
    return PP(v.x, v.y);
  };

  clamppos = function(pos, rect) {
    var x, y;
    if (pos == null) {
      pos = V();
    }
    if (rect == null) {
      rect = new Rect();
    }
    x = mafs.clamp(pos.x, rect.left(), rect.right());
    y = mafs.clamp(pos.y, rect.top(), rect.bottom());
    return V(x, y);
  };

  preload = function(src) {
    return PIXI.loader.add(imgpath(src)).load();
  };

  XXXX = function(tilesrc, tileW, tileH, cols, rows) {
    var numtiles, pxSheetH, pxSheetW, rowcount, tilesize, tsw, _tileset;
    preload(tilesrc);
    pxSheetW = tileW * cols;
    pxSheetH = tileH * rows;
    _tileset = _TEXBYNAME(tilesrc);
    _tileset.baseTexture.width = pxSheetW;
    _tileset.baseTexture.height = pxSheetH;
    tsw = 20;
    tilesize = 16;
    rowcount = 8;
    numtiles = rows * cols;
    return _maketiles(_tileset, tileW, tileH, cols, rows);
  };

  gettileoffs = function(n, tsw, tilesize) {
    return V(n % tsw, Math.floor(n / tsw));
  };

  maketiles = function(tileset, tsize, cols, rows) {
    return _maketiles(tileset, tsize, tsize, cols, rows);
  };

  _maketiles = function(tileset, tileW, tileH, cols, rows) {
    var i, numtiles, range, rec, tex, texs, x, y, _i, _results;
    numtiles = cols * rows;
    range = (function() {
      _results = [];
      for (var _i = 0; 0 <= numtiles ? _i < numtiles : _i > numtiles; 0 <= numtiles ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this);
    return texs = (function() {
      var _j, _len, _ref, _results1;
      _results1 = [];
      for (_j = 0, _len = range.length; _j < _len; _j++) {
        i = range[_j];
        tex = new PIXI.Texture(tileset);
        _ref = gettileoffs(i, cols), x = _ref.x, y = _ref.y;
        rec = new PIXI.Rectangle(x * tileW, y * tileH, tileW, tileH);
        tex.frame = rec;
        _results1.push(tex);
      }
      return _results1;
    })();
  };

  fontsrc = "font-hand-white-12x16";

  fonttexs = XXXX(fontsrc, 12, 16, 16, 6);

  body = $("body");

  playsound = function(src) {
    var snd;
    if (settings.muted) {
      return;
    }
    snd = new Audio();
    snd.src = audiobaseurl + src;
    snd.volume = settings.volume;
    return snd.play();
  };

  field = playingfield;

  renderer = new PIXI.CanvasRenderer(screensize.x, screensize.y);

  stage = new PIXI.Graphics();

  stage.beginFill(0x001122);

  stage.drawRect(field.x, field.y, field.w, field.h);

  stage.endFill();

  ascii = String.fromCharCode.apply(this, (function() {
    _results = [];
    for (_i = 32; _i <= 126; _i++){ _results.push(_i); }
    return _results;
  }).apply(this));

  fontmap = ascii;

  _charspritetick = function(sp) {
    var scale;
    sp.anchor.y = 1 - Math.sin(sp.varn + WORLD.tickno / 2) / 8;
    sp.anchor.x = 1 / 2;
    scale = 1 + Math.max(0, Math.sin(sp.varn / 8 - WORLD.tickno / 12));
    sp.scale.x = sp.scale.y = scale;
  };

  maketext = function(txt) {
    var chars, charwidth, i, itxt, n, offs, sp, spaces, sprites, tck, textcontainer, _j, _len;
    charwidth = 16;
    offs = V(64, 128);
    chars = txt.split("");
    itxt = chars.map(function(x) {
      return fontmap.indexOf(x);
    });
    spaces = 0;
    sprites = (function() {
      var _j, _len, _results1;
      _results1 = [];
      for (i = _j = 0, _len = itxt.length; _j < _len; i = ++_j) {
        n = itxt[i];
        if (n === 0) {
          spaces++;
        }
        sp = _SPRITE(fonttexs[n]);
        sp.varn = i + spaces * 64;
        sp.position = VTOPP(offs.vadd(V(i * charwidth, 0)));
        _results1.push(sp);
      }
      return _results1;
    })();
    tck = new PIXI.ticker.Ticker();
    tck.autoStart = true;
    tck.add(function() {
      return sprites.forEach(_charspritetick);
    });
    textcontainer = new PIXI.Graphics();
    for (_j = 0, _len = sprites.length; _j < _len; _j++) {
      sp = sprites[_j];
      textcontainer.addChild(sp);
    }
    return textcontainer;
  };

  body.append(renderer.view);

  ControlObj = (function() {
    function ControlObj() {
      this.bindings = {};
      this.holdbindings = {};
      this.heldkeys = [];
      this.bindingnames = {};
      this.reservedkeys = [];
    }

    ControlObj.prototype.isHolding = function(keyname) {
      var _ref;
      return _ref = keyCharToCode[keyname], __indexOf.call(this.heldkeys, _ref) >= 0;
    };

    ControlObj.prototype.bind = function(argkey, name, func) {
      var key;
      if (func == null) {
        func = noop;
      }
      key = keyCharToCode[argkey];
      this.bindingnames[key] = name;
      return this.bindings[key] = func;
    };

    ControlObj.prototype.reserve = function(keyname) {
      return this.reservedkeys.push(keyCharToCode[keyname]);
    };

    return ControlObj;

  })();

  control = new ControlObj;

  jame.control = control;

  control.bind('N', 'next stage', function() {
    return WORLD.init();
  });

  control.bind('R', 'reset stage', function() {
    return WORLD.reset();
  });

  control.bind('G', 'show hitboxes', function() {
    return WORLD.entAdd(new HitboxSprite);
  });

  _ref = ["Space", "Up", "Down", "Backspace", "Left", "Right"];
  for (_j = 0, _len = _ref.length; _j < _len; _j++) {
    key = _ref[_j];
    control.reserve(key);
  }

  eventelement = $(document);

  eventelement.bind('keydown', function(e) {
    var _base;
    key = e.which;
    if (typeof (_base = control.bindings)[key] === "function") {
      _base[key]();
    }
    if (__indexOf.call(control.heldkeys, key) < 0) {
      control.heldkeys.push(key);
    }
    return !(__indexOf.call(control.reservedkeys, key) >= 0);
  });

  eventelement.bind('keyup', function(e) {
    key = e.which;
    control.heldkeys = _.without(control.heldkeys, key);
    return !(__indexOf.call(control.reservedkeys, key) >= 0);
  });

  camera = {
    offset: V(),
    pos: V(),
    tick: function() {}
  };

  World = (function() {
    function World() {
      this.entities = [];
      this.tickno = 0;
      this.camera = camera;
    }

    World.prototype.entAdd = function(ent) {
      this.entities.push(ent);
      return typeof ent.render === "function" ? ent.render() : void 0;
    };

    World.prototype.entRemove = function(ent) {
      this.entities = _.difference(this.entities, [ent]);
      return typeof ent._cleanup === "function" ? ent._cleanup() : void 0;
    };

    return World;

  })();

  WORLD = new World;

  World.prototype.render = function() {
    var renderables;
    this.camera.tick();
    renderables = this.entities;
    return renderables.forEach(function(ent) {
      return typeof ent.render === "function" ? ent.render() : void 0;
    });
  };

  World.prototype.tick = function() {
    var _base, _k, _len1, _ref1;
    this.tickno++;
    _ref1 = control.heldkeys;
    for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
      key = _ref1[_k];
      if (typeof (_base = control.holdbindings)[key] === "function") {
        _base[key]();
      }
    }
    this.collect_hitboxes();
    hitboxcollection.tick();
    this.entities.forEach(function(ent) {
      try {
        return typeof ent.tick === "function" ? ent.tick() : void 0;
      } catch (_error) {}
    });
    return this.render();
  };

  hitboxcollection = new (HitBoxCollection = (function() {
    function HitBoxCollection() {
      this.clear();
    }

    HitBoxCollection.prototype.getcolls = function(ent) {
      var res;
      res = _.filter(this.collpairs, function(pair) {
        return pair[0] === ent;
      });
      return res;
    };

    HitBoxCollection.prototype.add = function(ent) {
      var box, i, newbox, _k, _len1, _ref1;
      newbox = ent.genhitbox();
      _ref1 = this.boxcache;
      for (i = _k = 0, _len1 = _ref1.length; _k < _len1; i = ++_k) {
        box = _ref1[i];
        if (newbox.overlaps(box)) {
          this.collpairs.push([ent, this.cache[i]]);
          this.collpairs.push([this.cache[i], ent]);
        }
      }
      this.cache.push(ent);
      return this.boxcache.push(ent.genhitbox());
    };

    HitBoxCollection.prototype.tick = function() {
      var fst, scd, _k, _len1, _ref1, _ref2, _results1;
      _ref1 = this.collpairs;
      _results1 = [];
      for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
        _ref2 = _ref1[_k], fst = _ref2[0], scd = _ref2[1];
        if (typeof fst.coll === "function") {
          fst.coll(scd);
        }
        _results1.push(typeof scd.coll === "function" ? scd.coll(fst) : void 0);
      }
      return _results1;
    };

    HitBoxCollection.prototype.clear = function() {
      this.cache = [];
      this.boxcache = [];
      return this.collpairs = [];
    };

    return HitBoxCollection;

  })());

  World.prototype.collect_hitboxes = function() {
    var ent, _k, _len1, _ref1, _results1;
    hitboxcollection.clear();
    _ref1 = this.entities;
    _results1 = [];
    for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
      ent = _ref1[_k];
      _results1.push(hitboxcollection.add(ent));
    }
    return _results1;
  };

  Renderable = (function() {
    function Renderable() {
      this.pos = V();
    }

    Renderable.prototype.render = function() {
      if (this._pixisprite == null) {
        this._pixisprite = _SPRITE(_TEXBYNAME(this.sprite));
      }
      stage.addChild(this._pixisprite);
      this._pixisprite.position = VTOPP(this.pos);
      return this._pixisprite.anchor = VTOPP(this.anchor);
    };

    return Renderable;

  })();

  Entity = (function(_super) {
    __extends(Entity, _super);

    function Entity(argobj) {
      Entity.__super__.constructor.call(this);
      this.vel = V();
      this.timers = {};
      if (typeof this.init === "function") {
        this.init();
      }
      this.anchor = V(1 / 2, 1 / 2);
      deepExtend(this, argobj);
    }

    return Entity;

  })(Renderable);

  Entity.prototype._cleanup = function() {
    return stage.removeChild(this._pixisprite);
  };

  HitboxSprite = (function(_super) {
    __extends(HitboxSprite, _super);

    function HitboxSprite() {
      _ref1 = HitboxSprite.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    HitboxSprite.prototype.render = function() {
      var sp;
      if (this._pixisprite == null) {
        this._pixisprite = new PIXI.Graphics();
      }
      stage.addChild(this._pixisprite);
      sp = this._pixisprite;
      sp.clear();
      return WORLD.entities.forEach(function(ent) {
        var box;
        box = ent.genhitbox();
        sp.lineStyle(1, 0x00FF00);
        sp.drawRect(box.x, box.y, box.w, box.h);
        sp.lineStyle(1, 0xFF00FF);
        return sp.drawCircle(ent.pos.x, ent.pos.y, 2);
      });
    };

    return HitboxSprite;

  })(Entity);

  Entity.prototype.size = V(16, 16);

  Entity.prototype.genhitbox = function() {
    return makebox(this.pos, this.size, this.anchor);
  };

  Entity.prototype.timeoutcheck = function() {
    var k, v, _ref2, _results1;
    _ref2 = this.timers;
    _results1 = [];
    for (k in _ref2) {
      v = _ref2[k];
      if (v > 0) {
        _results1.push(this.timers[k]--);
      } else {
        _results1.push(void 0);
      }
    }
    return _results1;
  };

  Entity.prototype.kill = function() {
    return WORLD.entRemove(this);
  };

  Entity.prototype.physmove = function() {
    return this.pos = this.pos.vadd(this.vel);
  };

  Entity.prototype.flipsprite = function() {
    if (this.vel.x !== 0) {
      this._pixisprite.scale.x -= Math.sign(this.vel.x);
      return this._pixisprite.scale.x /= 2;
    }
  };

  InvaderBee = (function(_super) {
    __extends(InvaderBee, _super);

    function InvaderBee() {
      _ref2 = InvaderBee.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    InvaderBee.prototype.init = function() {
      this.sprite = "bee";
      this.vel = V(2, 0);
      this.targetpos = this.pos;
      return this.anim = new Animation({
        texname: "beesplode",
        tilesize: 64,
        framecount: 4
      });
    };

    InvaderBee.prototype.tick = function() {
      this.timeoutcheck();
      this.physmove();
      if (this.isoffscreen()) {
        this.vel = this.vel.nmul(-1.01);
        this.targetpos.y += 16;
      }
      this._tween();
      this.clampposition(playingfield);
      this._sway();
      this.shootthebullet();
      this.flipsprite();
      return this.texset(this.anim.tex());
    };

    return InvaderBee;

  })(Entity);

  InvaderBee.prototype._tween = function() {
    return this.pos.y = this.pos.y - (this.pos.y - this.targetpos.y) / 3;
  };

  InvaderBee.prototype.isoffscreen = function() {
    return this.pos.x > playingfield.right() || this.pos.x < playingfield.left();
  };

  InvaderBee.prototype._sway = function() {
    return this.anchor.y = 1 / 2 + Math.sin(WORLD.tickno / 6) / 16;
  };

  InvaderBee.prototype._shoot = function(velocity) {
    return WORLD.entAdd(new BadBullet({
      pos: this.pos,
      vel: velocity
    }));
  };

  InvaderBee.prototype.shootthebullet = function(num) {
    if (this.timers.shoot) {
      return;
    }
    this.timers.shoot = 32 + 4 * mafs.randint(100);
    this._shoot(V(0, 8));
  };

  Entity.prototype.spawn = function(proto) {
    var ent;
    ent = new proto({
      pos: this.pos
    });
    WORLD.entAdd(ent);
    return ent;
  };

  InvaderBee.prototype.ondeath = function() {
    if (d6() === 6) {
      return this.spawn(PowerUp);
    }
  };

  InvaderBee.prototype.kill = function() {
    var bees, textcontainer;
    this.ondeath();
    bees = WORLD.entities.filter(function(ent) {
      return ent instanceof InvaderBee;
    });
    if (bees.length <= 0) {
      textcontainer = maketext("WOW! u done it.");
      stage.addChild(textcontainer);
    }
    return InvaderBee.__super__.kill.call(this);
  };

  Entity.prototype.clampposition = function(rect) {
    return this.pos = clamppos(this.pos, rect);
  };

  Entity.prototype.phys = function() {
    this.pos = this.pos.vadd(this.vel);
    this.vel = this.vel.vadd(this.acc);
    return this.vel = this.vel.vmul(this.fric);
  };

  PlayerFairy = (function(_super) {
    __extends(PlayerFairy, _super);

    function PlayerFairy() {
      _ref3 = PlayerFairy.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    PlayerFairy.prototype.init = function() {
      this.sprite = "emily";
      this.targetpos = V(0, 320);
      this.state = "normal";
      this.shootmode = 1;
      this.hp = 3;
      this.statetickno = 0;
      this.acc = V(0, 0);
      return this.fric = V(0.5, 1);
    };

    PlayerFairy.prototype.tiles = maketiles(_TEXBYNAME("emilysheet"), 32, 2, 3);

    PlayerFairy.prototype.statemachine = {};

    PlayerFairy.prototype.statechange = function(statename) {
      this.state = statename;
      return this.statetickno = 0;
    };

    PlayerFairy.prototype.tick = function() {
      var _ref4;
      this.statetickno++;
      if ((_ref4 = this.statemachine.tickfuns[this.state]) != null) {
        _ref4.apply(this);
      }
      return this.flipsprite();
    };

    PlayerFairy.prototype.plyinput = function() {
      this.acc.x = 0;
      if (control.isHolding("Left")) {
        this.acc.x = -8;
      }
      if (control.isHolding("Right")) {
        this.acc.x = +8;
      }
      if (control.isHolding("X")) {
        return this.shootthebullet(this.shootmode);
      }
    };

    return PlayerFairy;

  })(Entity);

  PlayerFairy.prototype.hit = function() {
    if (this.state === "dead" || this.state === "hurt") {
      return;
    }
    this.statechange("hurt");
    return this.hp--;
  };

  PlayerFairy.prototype.powerup = function() {
    return this.shootmode = 1 + mafs.randint(3);
  };

  PlayerFairy.prototype._blink = function() {
    return this._pixisprite.alpha = 1 - this.statetickno % 2;
  };

  PlayerFairy.prototype._tween = function() {
    return this.pos.y = (this.pos.y + this.targetpos.y) / 2;
  };

  PlayerFairy.prototype._sway = function() {
    return this.anchor.y = 1 / 2 + Math.sin(WORLD.tickno / 3) / 16;
  };

  PlayerFairy.prototype.statemachine.tickfuns = {
    dead: function() {
      if (this.statetickno === 1) {
        this.vel.y = -15;
      }
      this.vel.x = 0;
      this.acc.y = 2;
      if (this.vel.y > 0) {
        this.texset(this.tiles[4]);
      }
      this.phys();
      if (this.pos.y > 600) {
        this._gameover();
        this.statechange("normal");
        this.init();
        return this.vel = V();
      }
    },
    hurt: function() {
      if (this.hp <= 0) {
        this.statechange("dead");
      }
      if (this.statetickno >= 15) {
        this.statechange("normal");
      }
      if (this.statetickno <= 10) {
        this.targetpos.y = 320 + 16;
      }
      this.texset(this.tiles[2]);
      this._tween();
      return this._blink();
    },
    normal: function() {
      this.targetpos.y = 320;
      this.texset(this.tiles[0]);
      this.plyinput();
      this.phys();
      this._sway();
      this._tween();
      this.timeoutcheck();
      return this.clampposition(playingfield);
    }
  };

  _blat = function(text) {
    var textcontainer;
    textcontainer = maketext(text);
    stage.addChild(textcontainer);
    return textcontainer;
  };

  PlayerFairy.prototype._gameover = function() {
    var txtcont;
    this.kill();
    _blat("GAME OVER");
    txtcont = _blat("[R] to restart");
    return txtcont.position.y += 64;
  };

  PlayerFairy.prototype.coll = function(ent) {
    var die_on, proto, _k, _len1, _results1;
    die_on = [BadBullet, InvaderBee];
    _results1 = [];
    for (_k = 0, _len1 = die_on.length; _k < _len1; _k++) {
      proto = die_on[_k];
      if (ent instanceof proto) {
        _results1.push(this.hit());
      } else {
        _results1.push(void 0);
      }
    }
    return _results1;
  };

  intdiv = function(n, d) {
    return Math.floor(n / d);
  };

  intdivmod = function(n, d, m) {
    return intdiv(n / d) % m;
  };

  _selectframe = function(framelist, framewait) {
    var framechoice, totalframes;
    totalframes = framelist.length;
    framechoice = intdiv(WORLD.tickno, framewait) % totalframes;
    return framelist[framechoice];
  };

  sparkletiles = maketiles(_TEXBYNAME("sparkleshot"), 16, 4, 1);

  pollentiles = maketiles(_TEXBYNAME("pollen"), 16, 4, 1);

  preload("beesplode");

  Timer = (function() {
    function Timer(count) {
      this.count = count != null ? count : 0;
    }

    Timer.prototype.set = function(count) {
      this.count = count;
    };

    Timer.prototype.get = function() {
      return this.count;
    };

    Timer.prototype.tick = function() {
      if (this.count > 0) {
        return this.count--;
      }
    };

    return Timer;

  })();

  Animation = (function() {
    function Animation(argobj) {
      deepExtend(this, argobj);
      if (this.tilesize == null) {
        this.tilesize = 16;
      }
      if (this.texname == null) {
        this.texname = "sparkleshot";
      }
      if (this.framecount == null) {
        this.framecount = 5;
      }
      this.tileset = maketiles(_TEXBYNAME(this.texname), this.tilesize, this.framecount, 1);
      this.tickno = 0;
      this.framedelay = 4;
      this.frameoffset = 0;
    }

    Animation.prototype.tex = function() {
      var currframe;
      this.tickno = WORLD.tickno;
      currframe = this.frameoffset + Math.floor(this.tickno / this.framedelay);
      currframe = currframe % this.framecount;
      return this.tileset[currframe];
    };

    return Animation;

  })();

  Renderable.prototype.texset = function(tex) {
    return this._pixisprite.texture = tex;
  };

  floweranim = new Animation({
    texname: "flowert"
  });

  floweranim.presets = {
    block: {
      frameoffset: 4,
      framecount: 1
    },
    spin: {
      frameoffset: 0,
      framecount: 3
    }
  };

  floweranim.setseq = function(name) {
    return deepExtend(this, this.presets[name]);
  };

  Barrier = (function(_super) {
    __extends(Barrier, _super);

    function Barrier() {
      _ref4 = Barrier.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    Barrier.prototype.size = V(16, 16);

    Barrier.prototype.anim = floweranim;

    Barrier.prototype.tick = function() {
      this.timeoutcheck();
      if (this.timers.coll) {
        this.anim.setseq("block");
      } else {
        this.anim.setseq("spin");
      }
      return this.texset(this.anim.tex());
    };

    return Barrier;

  })(Entity);

  Barrier.prototype.coll = function(ent) {
    Barrier.__super__.coll.call(this, ent);
    if (ent instanceof BadBullet) {
      return this.timers.coll = 16;
    }
  };

  Entity.prototype.die_on = [];

  Entity.prototype.coll = function(ent) {
    var proto, _k, _len1, _ref5, _results1;
    _ref5 = this.die_on;
    _results1 = [];
    for (_k = 0, _len1 = _ref5.length; _k < _len1; _k++) {
      proto = _ref5[_k];
      if (ent instanceof proto) {
        _results1.push(this.kill());
      } else {
        _results1.push(void 0);
      }
    }
    return _results1;
  };

  Bulletproto = (function(_super) {
    __extends(Bulletproto, _super);

    function Bulletproto() {
      _ref5 = Bulletproto.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    Bulletproto.prototype.size = V(8, 8);

    Bulletproto.prototype.isoffscreen = function() {
      return this.pos.y < 0 || this.pos.y > 360;
    };

    Bulletproto.prototype.tick = function() {
      this._pixisprite.texture = _selectframe(this.tiles, 2);
      this.physmove();
      if (this.isoffscreen()) {
        return this.kill();
      }
    };

    return Bulletproto;

  })(Entity);

  Bullet = (function(_super) {
    __extends(Bullet, _super);

    function Bullet() {
      _ref6 = Bullet.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    Bullet.prototype.init = function() {
      return this.tiles = sparkletiles;
    };

    return Bullet;

  })(Bulletproto);

  BadBullet = (function(_super) {
    __extends(BadBullet, _super);

    function BadBullet() {
      _ref7 = BadBullet.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    BadBullet.prototype.init = function() {
      return this.tiles = pollentiles;
    };

    return BadBullet;

  })(Bulletproto);

  BadBullet.prototype.die_on = [PlayerFairy, Barrier, Bullet];

  Bullet.prototype.die_on = [InvaderBee, Barrier, BadBullet];

  Barrier.prototype.die_on = [Bullet];

  InvaderBee.prototype.die_on = [Bullet, PlayerFairy];

  PowerUp = (function(_super) {
    __extends(PowerUp, _super);

    function PowerUp() {
      _ref8 = PowerUp.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    PowerUp.prototype.size = V(8, 8);

    PowerUp.prototype.init = function() {
      return this.vel = V(0, 4);
    };

    PowerUp.prototype.sprite = "crown";

    PowerUp.prototype.tick = function() {
      this.physmove();
      if (this.isoffscreen()) {
        return this.kill();
      }
    };

    PowerUp.prototype.coll = function(ent) {
      if (ent instanceof PlayerFairy) {
        this.kill();
        return ent.powerup();
      }
    };

    return PowerUp;

  })(Entity);

  PlayerFairy.prototype.shootthebullet = function(num) {
    var shotpattern, vel, _k, _len1, _sh, _shoot,
      _this = this;
    shotpattern = [V(0, -8), V(2, -7), V(-2, -7)];
    if (this.timers.shoot) {
      return;
    }
    _sh = function(vel, offs) {
      if (offs == null) {
        offs = V();
      }
      return WORLD.entAdd(new Bullet({
        pos: _this.pos.vadd(offs),
        vel: vel
      }));
    };
    _shoot = function(velocity) {
      return WORLD.entAdd(new Bullet({
        pos: _this.pos,
        vel: velocity
      }));
    };
    if (num === 1) {
      _shoot(V(0, -10));
      this.timers.shoot = 8;
    }
    if (num === 2) {
      _sh(V(0, -6), V(-8));
      _sh(V(0, -6), V(8));
      this.timers.shoot = 16;
    }
    if (num === 3) {
      for (_k = 0, _len1 = shotpattern.length; _k < _len1; _k++) {
        vel = shotpattern[_k];
        _shoot(vel);
      }
      this.timers.shoot = 16;
    }
  };

  hz = function(ms) {
    return Math.round(1000 / ms);
  };

  (animate = function() {
    renderer.render(stage);
    return requestAnimationFrame(animate);
  })();

  WORLD.mainloop = function() {
    if (!settings.paused) {
      WORLD.tick();
    }
    return setTimeout(WORLD.mainloop, hz(settings.fps));
  };

  WORLD.init = function() {
    var em, _k, _results1;
    [0, 1, 2, 3, 4].forEach(function(i) {
      WORLD.entAdd(new Barrier({
        pos: V(32 + i * 16, 300)
      }));
      WORLD.entAdd(new Barrier({
        pos: V(32 * 5 + i * 16, 300)
      }));
      return WORLD.entAdd(new Barrier({
        pos: V(32 * 9 + i * 16, 300)
      }));
    });
    (function() {
      _results1 = [];
      for (_k = 0; _k <= 32; _k++){ _results1.push(_k); }
      return _results1;
    }).apply(this).forEach(function(i) {
      var b;
      b = new InvaderBee;
      b.pos.x = 32 * (i % 8);
      b.pos.y = Math.floor(i / 8) * 32;
      return WORLD.entAdd(b);
    });
    em = new PlayerFairy;
    em.pos.y = 320;
    em.pos.x = 64;
    WORLD.entAdd(em);
    return WORLD.playerent = em;
  };

  WORLD.mainloop();

  WORLD.reset = function() {
    this.entities = [];
    stage = new PIXI.Container();
    return this.init();
  };

  $(renderer.view).contextmenu(function() {
    return false;
  });

  WORLD.init();

  /*
  exports
  */


  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  jame.WORLD = WORLD;

  root.jame = jame;

  root.stage = stage;

}).call(this);

/*
//@ sourceMappingURL=game.map
*/
