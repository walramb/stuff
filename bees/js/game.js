// Generated by CoffeeScript 1.10.0
(function() {
  var Animation, BadBullet, BadSuperBullet, Barrier, Bullet, Bulletproto, ControlObj, Entity, HitBoxCollection, HitboxSprite, Hud, InvaderBee, LOG, PP, Physobj, PlayerFairy, PowerUp, Rect, Renderable, SelectIndicator, StateMachine, THISFILE, Timer, V, VTOPP, WORLD, World, XXXX, _SPRITE, _TEXBYNAME, _blat, _charspritetick, _decorate, _maketiles, _selectframe, _text, animate, ascii, audiobaseurl, beeline, body, camera, clamp_position, control, deepExtend, eventelement, field, floweranim, flowerline, fontmap, fontsrc, fonttexs, gettileoffs, hitboxcollection, hz, imgext, imgpath, intdiv, intdivmod, j, jame, key, l, len, linterpolate, ls, makebox, maketext, maketiles, menu, noop, pausePlane, playingfield, playsound, pollentiles, preload, projectiles, ref, renderer, results, root, sanitize_settings, screensize, settings, sourcebaseurl, sparkletiles, stage,
    slice = [].slice,
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Rect = halp.Rect;

  jame = {};

  THISFILE = "js/game.js";

  sourcebaseurl = "./sprites/";

  audiobaseurl = "./audio/";

  imgext = ".png";

  settings = {
    fps: 30,
    muted: false,
    paused: false,
    volume: 3 / 8,
    scale: 1
  };

  jame.settings = settings;

  ls = {
    data: {},
    save: function() {
      localStorage.setItem('beegame', JSON.stringify(this.data));
      return console.log('saved localstorage');
    },
    load: function() {
      this.data = JSON.parse(localStorage.getItem('beegame'));
      if (this.data == null) {
        this.data = {};
      }
      console.log('loaded localstorage');
      return console.log(this.data);
    }
  };

  ls.load();

  settings.muted = ls.data.muted || false;

  V = function(x, y) {
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    return new V2d(x, y);
  };

  screensize = V(960, 540);

  playingfield = new Rect(0, 0, 360, 480);


  /*
  = "helper" functions
  for readability or whatever
   */

  LOG = function(text) {
    return console.log(text);
  };

  linterpolate = function(a, b, frac) {
    return a + (b - a) * frac;
  };

  hz = function(ms) {
    return Math.round(1000 / ms);
  };

  makebox = function(position, dimensions, anchor) {
    var truepos;
    truepos = position.vsub(dimensions.vmul(anchor));
    return new Rect(truepos.x, truepos.y, dimensions.x, dimensions.y);
  };


  /*
  deepExtend pilfered from Ryan LeFevre
  
  this is intended as a fairly generic way to
  alter default values of new objects,
  in a more data-driven way.
  
  (instead of dealing with unnamed arguments or lots of method calls
  or whatever.)
  deep so you can alter a component of an object such as coordinates
  without completely overwriting the whole object.
  
  I imagine something more like this:
    ent = new Entity pos: {x:0, y:0}, vel: {x: 0, y:32}
   */

  deepExtend = function() {
    var extenders, j, key, len, object, other, val;
    object = arguments[0], extenders = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    if (object == null) {
      return {};
    }
    for (j = 0, len = extenders.length; j < len; j++) {
      other = extenders[j];
      for (key in other) {
        if (!hasProp.call(other, key)) continue;
        val = other[key];
        if ((object[key] == null) || typeof val !== "object") {
          object[key] = val;
        } else {
          object[key] = deepExtend(object[key], val);
        }
      }
    }
    return object;
  };

  noop = function() {};

  imgpath = function(basename) {
    return sourcebaseurl + basename + imgext;
  };

  _TEXBYNAME = function(imgsrc) {
    LOG(imgpath(imgsrc));
    return PIXI.Texture.fromImage(imgpath(imgsrc));
  };

  _blat = function(text, offs) {
    var ent, textcontainer;
    if (offs == null) {
      offs = 0;
    }
    ent = new Renderable();
    ent.anchor = V(0, 0);
    ent.pos.y += 32 * offs;
    textcontainer = maketext(text);
    ent._pixisprite = textcontainer;
    WORLD.entAdd(ent);
    return ent;
  };

  _SPRITE = function(tex) {
    return new PIXI.Sprite(tex);
  };

  PP = function(x, y) {
    return new PIXI.Point(x, y);
  };

  VTOPP = function(v) {
    return PP(v.x, v.y);
  };

  clamp_position = function(pos, rect) {
    var x, y;
    if (pos == null) {
      pos = V();
    }
    if (rect == null) {
      rect = new Rect();
    }
    x = mafs.clamp(pos.x, rect.left(), rect.right());
    y = mafs.clamp(pos.y, rect.top(), rect.bottom());
    return V(x, y);
  };

  preload = function(src) {
    return PIXI.loader.add(imgpath(src)).load();
  };

  XXXX = function(tilesrc, tileW, tileH, cols, rows) {
    var _tileset, numtiles, pxSheetH, pxSheetW, rowcount, tilesize, tsw;
    preload(tilesrc);
    pxSheetW = tileW * cols;
    pxSheetH = tileH * rows;
    _tileset = _TEXBYNAME(tilesrc);
    _tileset.baseTexture.width = pxSheetW;
    _tileset.baseTexture.height = pxSheetH;
    tsw = 20;
    tilesize = 16;
    rowcount = 8;
    numtiles = rows * cols;
    return _maketiles(_tileset, tileW, tileH, cols, rows);
  };

  gettileoffs = function(n, tsw, tilesize) {
    return V(n % tsw, Math.floor(n / tsw));
  };

  maketiles = function(tileset, tsize, cols, rows) {
    return _maketiles(tileset, tsize, tsize, cols, rows);
  };

  _maketiles = function(tileset, tileW, tileH, cols, rows) {
    var i, j, numtiles, range, rec, results, tex, texs, x, y;
    numtiles = cols * rows;
    range = (function() {
      results = [];
      for (var j = 0; 0 <= numtiles ? j < numtiles : j > numtiles; 0 <= numtiles ? j++ : j--){ results.push(j); }
      return results;
    }).apply(this);
    return texs = (function() {
      var l, len, ref, results1;
      results1 = [];
      for (l = 0, len = range.length; l < len; l++) {
        i = range[l];
        tex = new PIXI.Texture(tileset);
        ref = gettileoffs(i, cols), x = ref.x, y = ref.y;
        rec = new PIXI.Rectangle(x * tileW, y * tileH, tileW, tileH);
        tex.frame = rec;
        results1.push(tex);
      }
      return results1;
    })();
  };

  fontsrc = "font-hand-white-12x16";

  fonttexs = XXXX(fontsrc, 12, 16, 16, 6);

  body = $("body");

  playsound = function(src) {
    var snd;
    if (settings.muted) {
      return;
    }
    snd = new Audio();
    snd.src = audiobaseurl + src;
    snd.volume = settings.volume;
    return snd.play();
  };

  field = playingfield;

  renderer = new PIXI.CanvasRenderer(screensize.x, screensize.y);

  stage = new PIXI.Graphics();

  _decorate = function(stage) {
    stage.beginFill(0x001122);
    stage.drawRect(field.x, field.y, field.w, field.h);
    return stage.endFill();
  };

  ascii = String.fromCharCode.apply(this, (function() {
    results = [];
    for (j = 32; j <= 126; j++){ results.push(j); }
    return results;
  }).apply(this));

  fontmap = ascii;

  _charspritetick = function(sp) {
    var scale, tickno;
    tickno = WORLD.tickno;
    sp.anchor.y = 1 - Math.sin(sp.varn + tickno / 2) / 8;
    sp.anchor.x = 1 / 2;
    scale = 1 + Math.max(0, Math.sin(sp.varn / 8 - tickno / 12));
    sp.scale.x = sp.scale.y = scale;
  };

  maketext = function(txt) {
    var chars, charwidth, i, itxt, l, len, n, offs, sp, spaces, sprites, tck, textcontainer;
    charwidth = 16;
    offs = V(64, 128);
    chars = txt.split("");
    itxt = chars.map(function(x) {
      return fontmap.indexOf(x);
    });
    spaces = 0;
    sprites = (function() {
      var l, len, results1;
      results1 = [];
      for (i = l = 0, len = itxt.length; l < len; i = ++l) {
        n = itxt[i];
        if (n === 0) {
          spaces++;
        }
        sp = _SPRITE(fonttexs[n]);
        sp.varn = i + spaces * 64;
        sp.position = VTOPP(offs.vadd(V(i * charwidth, 0)));
        results1.push(sp);
      }
      return results1;
    })();
    tck = new PIXI.ticker.Ticker();
    tck.autoStart = true;
    tck.add(function() {
      return sprites.forEach(_charspritetick);
    });
    textcontainer = new PIXI.Graphics();
    for (l = 0, len = sprites.length; l < len; l++) {
      sp = sprites[l];
      textcontainer.addChild(sp);
    }
    return textcontainer;
  };

  body.append(renderer.view);

  ControlObj = (function() {
    function ControlObj() {
      this.bindings = {};
      this.holdbindings = {};
      this.heldkeys = [];
      this.bindingnames = {};
      this.reservedkeys = [];
    }

    ControlObj.prototype.isHolding = function(keyname) {
      var ref;
      return ref = keyCharToCode[keyname], indexOf.call(this.heldkeys, ref) >= 0;
    };

    ControlObj.prototype.bind = function(argkey, name, func) {
      var key;
      if (func == null) {
        func = noop;
      }
      key = keyCharToCode[argkey];
      this.bindingnames[key] = name;
      return this.bindings[key] = func;
    };

    ControlObj.prototype.reserve = function(keyname) {
      return this.reservedkeys.push(keyCharToCode[keyname]);
    };

    return ControlObj;

  })();

  control = new ControlObj;

  jame.control = control;

  control.bind('R', 'reset stage', function() {
    return WORLD.reset();
  });

  control.bind('W', 'win', function() {
    return WORLD.WIN();
  });

  control.bind('G', 'show hitboxes', function() {
    return WORLD.entAdd(new HitboxSprite);
  });

  control.bind('T', 'do tick', function() {
    settings.paused = true;
    return WORLD.tick();
  });

  control.bind('Enter', 'pause', function() {
    if (!settings.paused) {
      return WORLD.pause();
    }
  });

  control.bind('Esc', 'toggle pause', function() {
    return WORLD.pause();
  });

  ref = ["Space", "Up", "Down", "Backspace", "Left", "Right"];
  for (l = 0, len = ref.length; l < len; l++) {
    key = ref[l];
    control.reserve(key);
  }

  eventelement = $(document);

  eventelement.bind('keydown', function(e) {
    var base;
    key = e.which;
    if (typeof (base = control.bindings)[key] === "function") {
      base[key]();
    }
    if (indexOf.call(control.heldkeys, key) < 0) {
      control.heldkeys.push(key);
    }
    return !(indexOf.call(control.reservedkeys, key) >= 0);
  });

  eventelement.bind('keyup', function(e) {
    key = e.which;
    control.heldkeys = _.without(control.heldkeys, key);
    return !(indexOf.call(control.reservedkeys, key) >= 0);
  });

  camera = {
    offset: V(),
    pos: V(),
    tick: function() {}
  };

  World = (function() {
    function World() {
      this.entities = [];
      this.tickno = 0;
      this.camera = camera;
    }

    World.prototype.entAdd = function(ent) {
      this.entities.push(ent);
      if (typeof ent.render === "function") {
        ent.render();
      }
      return stage.addChild(ent._pixisprite);
    };

    World.prototype.entRemove = function(ent) {
      this.entities = _.difference(this.entities, [ent]);
      stage.removeChild(ent._pixisprite);
      return typeof ent._cleanup === "function" ? ent._cleanup() : void 0;
    };

    return World;

  })();

  WORLD = new World;

  World.prototype.render = function() {
    var renderables;
    this.camera.tick();
    renderables = this.entities;
    return renderables.forEach(function(ent) {
      return typeof ent.render === "function" ? ent.render() : void 0;
    });
  };

  World.prototype.tick = function() {
    var base, len1, o, ref1;
    this.tickno++;
    ref1 = control.heldkeys;
    for (o = 0, len1 = ref1.length; o < len1; o++) {
      key = ref1[o];
      if (typeof (base = control.holdbindings)[key] === "function") {
        base[key]();
      }
    }
    this.collect_hitboxes();
    hitboxcollection.tick();
    this.entities.forEach(function(ent) {
      try {
        return typeof ent.tick === "function" ? ent.tick() : void 0;
      } catch (undefined) {}
    });
    return this.render();
  };

  hitboxcollection = new (HitBoxCollection = (function() {
    function HitBoxCollection() {
      this.clear();
    }

    HitBoxCollection.prototype.getcolls = function(ent) {
      var res;
      res = _.filter(this.collpairs, function(pair) {
        return pair[0] === ent;
      });
      return res;
    };

    HitBoxCollection.prototype.add = function(ent) {
      var box, i, len1, newbox, o, ref1;
      if (!ent.genhitbox) {
        return;
      }
      newbox = ent.genhitbox();
      ref1 = this.boxcache;
      for (i = o = 0, len1 = ref1.length; o < len1; i = ++o) {
        box = ref1[i];
        if (newbox.overlaps(box)) {
          this.collpairs.push([ent, this.cache[i]]);
          this.collpairs.push([this.cache[i], ent]);
        }
      }
      this.cache.push(ent);
      return this.boxcache.push(ent.genhitbox());
    };

    HitBoxCollection.prototype.tick = function() {
      var fst, len1, o, ref1, ref2, results1, scd;
      ref1 = this.collpairs;
      results1 = [];
      for (o = 0, len1 = ref1.length; o < len1; o++) {
        ref2 = ref1[o], fst = ref2[0], scd = ref2[1];
        results1.push(typeof fst.coll === "function" ? fst.coll(scd) : void 0);
      }
      return results1;
    };

    HitBoxCollection.prototype.clear = function() {
      this.cache = [];
      this.boxcache = [];
      return this.collpairs = [];
    };

    return HitBoxCollection;

  })());

  World.prototype.collect_hitboxes = function() {
    var ent, len1, o, ref1, results1;
    hitboxcollection.clear();
    ref1 = this.entities;
    results1 = [];
    for (o = 0, len1 = ref1.length; o < len1; o++) {
      ent = ref1[o];
      results1.push(hitboxcollection.add(ent));
    }
    return results1;
  };

  Renderable = (function() {
    function Renderable() {
      this.pos = V();
    }

    Renderable.prototype.render = function() {
      if (this._pixisprite == null) {
        this._pixisprite = _SPRITE(_TEXBYNAME(this.sprite));
      }
      this._pixisprite.position = VTOPP(this.pos);
      this._pixisprite.anchor = VTOPP(this.anchor);
      return typeof this.render_ === "function" ? this.render_() : void 0;
    };

    return Renderable;

  })();

  Entity = (function(superClass) {
    extend(Entity, superClass);

    function Entity(argobj) {
      Entity.__super__.constructor.call(this);
      this.vel = V();
      this.timers = {};
      if (typeof this.init === "function") {
        this.init();
      }
      this.anchor = V(1 / 2, 1 / 2);
      deepExtend(this, argobj);
    }

    return Entity;

  })(Renderable);

  Entity.prototype._cleanup = function() {
    return stage.removeChild(this._pixisprite);
  };

  HitboxSprite = (function(superClass) {
    extend(HitboxSprite, superClass);

    function HitboxSprite() {
      return HitboxSprite.__super__.constructor.apply(this, arguments);
    }

    HitboxSprite.prototype.render = function() {
      var sp;
      if (this._pixisprite == null) {
        this._pixisprite = new PIXI.Graphics();
      }
      sp = this._pixisprite;
      sp.clear();
      return WORLD.entities.forEach(function(ent) {
        var box;
        if (!ent.genhitbox) {
          return;
        }
        box = ent.genhitbox();
        sp.lineStyle(1, 0x00FF00);
        sp.drawRect(box.x, box.y, box.w, box.h);
        sp.lineStyle(1, 0xFF00FF);
        return sp.drawCircle(ent.pos.x, ent.pos.y, 2);
      });
    };

    return HitboxSprite;

  })(Entity);

  Entity.prototype.size = V(16, 16);

  Entity.prototype.genhitbox = function() {
    return makebox(this.pos, this.size, this.anchor);
  };

  Entity.prototype.timeoutcheck = function() {
    var k, ref1, results1, v;
    ref1 = this.timers;
    results1 = [];
    for (k in ref1) {
      v = ref1[k];
      if (v > 0) {
        results1.push(this.timers[k]--);
      } else {
        results1.push(void 0);
      }
    }
    return results1;
  };

  Entity.prototype.kill = function() {
    return WORLD.entRemove(this);
  };

  Entity.prototype.physmove = function() {
    return this.pos = this.pos.vadd(this.vel);
  };

  Entity.prototype.flipsprite = function() {
    var actual, targ;
    if (this.vel.x !== 0) {
      targ = -Math.sign(this.vel.x);
      actual = this._pixisprite.scale.x;
      return this._pixisprite.scale.x = linterpolate(actual, targ, 1 / 4);
    }
  };

  Entity.prototype.spawn = function(proto) {
    var ent;
    ent = new proto({
      pos: this.pos
    });
    WORLD.entAdd(ent);
    return ent;
  };

  Entity.prototype.clampposition = function(rect) {
    return this.pos = clamp_position(this.pos, rect);
  };

  preload("beesplode");

  InvaderBee = (function(superClass) {
    extend(InvaderBee, superClass);

    function InvaderBee() {
      return InvaderBee.__super__.constructor.apply(this, arguments);
    }

    return InvaderBee;

  })(Entity);

  InvaderBee.prototype.init = function() {
    this.sprite = "bee";
    this.vel = V(2, 0);
    this.targetpos = this.pos;
    this.deathanim = new Animation({
      parent: this,
      texname: "beesplode",
      tilesize: 64,
      framecount: 4
    });
    this.anim = new Animation({
      parent: this,
      texname: "bee",
      tilesize: 32,
      framecount: 1
    });
    this.state = new StateMachine(this);
    this.state.set("normal");
    return this.resettimer();
  };

  InvaderBee.prototype.dropRate = 1 / 6;

  InvaderBee.prototype.resettimer = function() {
    return this.timers.shoot = 32 + 32 * mafs.randint(32);
  };

  InvaderBee.prototype._tick = function() {
    this.physmove();
    if (this.isoffscreen()) {
      this.vel = this.vel.nmul(-1.05);
      this.targetpos.y += 16;
    }
    this._tween();
    return this.clampposition(playingfield);
  };

  InvaderBee.prototype.tick = function() {
    this.timeoutcheck();
    this.state.tick();
    return this._tick();
  };

  InvaderBee.prototype.tickfuns = {
    dying: function() {
      if (this.state.tickno > 0) {
        this.targetpos.y -= 2;
        this.vel.x = 0;
      }
      if (this.state.tickno > 12) {
        WORLD.entRemove(this);
        WORLD.stats.hits++;
        return console.log(WORLD.stats.hits);
      }
    },
    normal: function() {
      this._sway();
      return this.shootthebullet();
    }
  };

  InvaderBee.prototype._tween = function() {
    return this.pos.y = linterpolate(this.pos.y, this.targetpos.y, 1 / 3);
  };

  InvaderBee.prototype.isoffscreen = function() {
    return this.pos.x > playingfield.right() || this.pos.x < playingfield.left();
  };

  InvaderBee.prototype._sway = function() {
    return this.anchor.y = 1 / 2 + Math.sin(WORLD.tickno / 6) / 16;
  };

  InvaderBee.prototype._shoot = function(velocity) {
    var ent;
    if (Math.random() < 1 / 6) {
      return ent = this.spawn(BadSuperBullet);
    } else {
      ent = this.spawn(BadBullet);
      return ent.vel = velocity;
    }
  };

  InvaderBee.prototype.shootthebullet = function(num) {
    if (this.timers.shoot) {
      return;
    }
    this.resettimer('shoot');
    this._shoot(V(0, 4));
    return playsound("jump.wav");
  };

  InvaderBee.prototype.kill = function() {
    playsound("hit.wav");
    playsound("boip.wav");
    this.anim = this.deathanim;
    this.state.set("dying");
    if (Math.random() <= this.dropRate) {
      return this.spawn(PowerUp);
    }
  };

  InvaderBee.prototype.render_ = function() {
    this.flipsprite();
    this.texset(this.anim.tex());
    if (this.timers.shoot < 8) {
      return this.texset(this.deathanim.tileset[0]);
    }
  };

  WORLD.WIN = function() {
    var acc;
    if (WORLD.winstate) {
      return;
    }
    WORLD.winstate = true;
    _blat("WOW! u done it.");
    _blat(WORLD.stats.shots + " sparkles fired", 2);
    acc = Math.round(WORLD.stats.hits / WORLD.stats.shots * 100);
    _blat(acc + "% accuracy", 3);
    _blat("cleared in " + (Math.round(WORLD.tickno / settings.fps)) + " seconds", 4);
    return _blat("rip " + WORLD.stats.hits + " bees", 5);
  };

  Physobj = (function() {
    function Physobj() {
      if (this.pos == null) {
        this.pos = V();
      }
      if (this.vel == null) {
        this.vel = V();
      }
      if (this.fric == null) {
        this.fric = V();
      }
      if (this.acc == null) {
        this.acc = V();
      }
    }

    return Physobj;

  })();

  Entity.prototype.phystick = function() {
    this.pos = this.pos.vadd(this.vel);
    this.vel = this.vel.vadd(this.acc);
    return this.vel = this.vel.vmul(this.fric);
  };

  Entity.prototype.physinit = function() {
    if (this.pos == null) {
      this.pos = V();
    }
    if (this.vel == null) {
      this.vel = V();
    }
    if (this.fric == null) {
      this.fric = V();
    }
    return this.acc != null ? this.acc : this.acc = V();
  };

  StateMachine = (function() {
    function StateMachine(parent) {
      this.parent = parent;
      this.tickno = 0;
      this.state = "idle";
    }

    StateMachine.prototype.tick = function() {
      var ref1;
      this.tickno++;
      return (ref1 = this.parent.tickfuns[this.get()]) != null ? ref1.apply(this.parent) : void 0;
    };

    StateMachine.prototype.get = function() {
      return this.state;
    };

    StateMachine.prototype.set = function(statename) {
      this.state = statename;
      return this.tickno = 0;
    };

    StateMachine.prototype.setif = function(statename, cond) {
      if (cond) {
        return this.set(statename);
      }
    };

    return StateMachine;

  })();

  PlayerFairy = (function(superClass) {
    extend(PlayerFairy, superClass);

    function PlayerFairy() {
      return PlayerFairy.__super__.constructor.apply(this, arguments);
    }

    PlayerFairy.prototype.init = function() {
      this.sprite = "emily";
      this.targetpos = V(0, 320);
      this.vel = V();
      this.state = new StateMachine(this);
      this.state.set("normal");
      this.shootmode = 1;
      this.hp = 3;
      this.acc = V(0, 0);
      this.fric = V(0.5, 1);
      return this.timers.mana = 0;
    };

    PlayerFairy.prototype.tiles = maketiles(_TEXBYNAME("emilysheet"), 32, 2, 3);

    PlayerFairy.prototype.tick = function() {
      this.state.tick();
      return this.flipsprite();
    };

    PlayerFairy.prototype.plyinput = function() {
      this.acc.x = 0;
      if (control.isHolding("Left")) {
        this.acc.x = -6;
      }
      if (control.isHolding("Right")) {
        this.acc.x = +6;
      }
      if (!this.timers.vertical) {
        if (control.isHolding("Up")) {
          this.targetpos = V(0, 320 - 48);
          this.timers.vertical = 10;
        }
        if (control.isHolding("Down")) {
          this.targetpos = V(0, 320);
          this.timers.vertical = 10;
        }
      }
      if (control.isHolding("X")) {
        return this.shootthebullet(this.shootmode);
      }
    };

    return PlayerFairy;

  })(Entity);

  PlayerFairy.prototype.hit = function() {
    var state;
    playsound("hit.wav");
    playsound("but.wav");
    state = this.state.get();
    if (state === "dead" || state === "hurt") {
      return;
    }
    this.state.set("hurt");
    return this.hp--;
  };

  PlayerFairy.prototype.powerup = function(shootmode) {
    return this.shootmode = shootmode;
  };

  PlayerFairy.prototype._blink = function() {
    return this._pixisprite.alpha = 1 - this.state.tickno % 2;
  };

  PlayerFairy.prototype._tween = function() {
    return this.pos.y = linterpolate(this.pos.y, this.targetpos.y, 1 / 2);
  };

  PlayerFairy.prototype._sway = function() {
    return this.anchor.y = 1 / 2 + Math.sin(WORLD.tickno / 3) / 16;
  };

  PlayerFairy.prototype.tickfuns = {
    dead: function() {
      if (this.state.tickno === 1) {
        this.vel.y = -15;
      }
      this.vel.x = 0;
      this.acc.y = 2;
      if (this.vel.y > 0) {
        this.texset(this.tiles[4]);
      }
      this.phystick();
      if (this.pos.y > 600) {
        this._gameover();
        this.state.set("normal");
        return this.init();
      }
    },
    hurt: function() {
      this.plyinput();
      this.state.setif("dead", this.hp <= 0);
      if (this.state.tickno >= 15) {
        this.state.set("normal");
      }
      if (this.state.tickno <= 10) {
        this.targetpos.y = 320 + 16;
      }
      this.texset(this.tiles[2]);
      this._tween();
      return this._blink();
    },
    normal: function() {
      var bees;
      this.texset(this.tiles[0]);
      this.plyinput();
      this.phystick();
      this._sway();
      this._tween();
      this.timeoutcheck();
      this.clampposition(playingfield);
      bees = WORLD.entities.filter(function(ent) {
        return ent instanceof InvaderBee;
      });
      if (bees.length <= 0) {
        return WORLD.WIN();
      }
    }
  };

  PlayerFairy.prototype._gameover = function() {
    var txtcont;
    this.kill();
    _blat("GAME OVER");
    txtcont = _blat("[R] to restart");
    return txtcont.pos.y += 64;
  };

  PlayerFairy.prototype.coll = function(ent) {
    var die_on, len1, o, proto, results1;
    die_on = [BadBullet, InvaderBee];
    results1 = [];
    for (o = 0, len1 = die_on.length; o < len1; o++) {
      proto = die_on[o];
      if (ent instanceof proto) {
        results1.push(this.hit());
      } else {
        results1.push(void 0);
      }
    }
    return results1;
  };

  intdiv = function(n, d) {
    return Math.floor(n / d);
  };

  intdivmod = function(n, d, m) {
    return intdiv(n / d) % m;
  };

  _selectframe = function(framelist, framewait) {
    var framechoice, totalframes;
    totalframes = framelist.length;
    framechoice = intdiv(WORLD.tickno, framewait) % totalframes;
    return framelist[framechoice];
  };

  projectiles = maketiles(_TEXBYNAME("projectiles"), 16, 5, 3);

  sparkletiles = projectiles.slice(1, 5);

  pollentiles = maketiles(_TEXBYNAME("pollen"), 16, 4, 1);

  Timer = (function() {
    function Timer(initialvalue) {
      this.initialvalue = initialvalue != null ? initialvalue : 0;
      this.reset();
    }

    Timer.prototype.set = function(count) {
      this.count = count;
    };

    Timer.prototype.get = function() {
      return this.count;
    };

    Timer.prototype.tick = function() {
      if (this.count > 0) {
        return this.count--;
      }
    };

    Timer.prototype.reset = function() {
      return this.count = this.initialvalue;
    };

    return Timer;

  })();

  Animation = (function() {
    function Animation(argobj) {
      deepExtend(this, argobj);
      if (this.tilesize == null) {
        this.tilesize = 16;
      }
      if (this.texname == null) {
        this.texname = "sparkleshot";
      }
      if (this.framecount == null) {
        this.framecount = 5;
      }
      if (this.tileset == null) {
        this.tileset = maketiles(_TEXBYNAME(this.texname), this.tilesize, this.framecount, 1);
      }
      this.tickno = 0;
      if (this.framedelay == null) {
        this.framedelay = 4;
      }
      if (this.frameoffset == null) {
        this.frameoffset = 0;
      }
    }

    Animation.prototype.tex = function() {
      var currframe, ref1, ref2;
      this.tickno = ((ref1 = this.parent) != null ? (ref2 = ref1.state) != null ? ref2.tickno : void 0 : void 0) || WORLD.tickno;
      currframe = Math.floor(this.tickno / this.framedelay);
      currframe = this.frameoffset + currframe % this.framecount;
      return this.tileset[currframe];
    };

    return Animation;

  })();

  Renderable.prototype.texset = function(tex) {
    return this._pixisprite.texture = tex;
  };

  floweranim = new Animation({
    texname: "flowert"
  });

  floweranim.presets = {
    block: {
      frameoffset: 0,
      framecount: 4
    },
    spin: {
      frameoffset: 4,
      framecount: 1
    }
  };

  floweranim.setseq = function(name) {
    return deepExtend(this, this.presets[name]);
  };

  Barrier = (function(superClass) {
    extend(Barrier, superClass);

    function Barrier() {
      return Barrier.__super__.constructor.apply(this, arguments);
    }

    Barrier.prototype.size = V(16, 16);

    Barrier.prototype.anim = floweranim;

    Barrier.prototype.tick = function() {
      return this.timeoutcheck();
    };

    Barrier.prototype.render_ = function() {
      if (this.timers.coll) {
        this.anim.setseq("spin");
      } else {
        this.anim.setseq("block");
      }
      return this.texset(this.anim.tex());
    };

    return Barrier;

  })(Entity);

  Barrier.prototype.coll = function(ent) {
    Barrier.__super__.coll.call(this, ent);
    if (ent instanceof BadBullet) {
      playsound("pause.wav");
      this.timers.coll = 16;
    }
    if (ent instanceof BadSuperBullet) {
      return this.kill();
    }
  };

  Entity.prototype.die_on = [];

  Entity.prototype.coll = function(ent) {
    var len1, o, proto, ref1, results1;
    ref1 = this.die_on;
    results1 = [];
    for (o = 0, len1 = ref1.length; o < len1; o++) {
      proto = ref1[o];
      if (ent instanceof proto) {
        results1.push(this.kill());
      } else {
        results1.push(void 0);
      }
    }
    return results1;
  };

  Bulletproto = (function(superClass) {
    extend(Bulletproto, superClass);

    function Bulletproto() {
      return Bulletproto.__super__.constructor.apply(this, arguments);
    }

    Bulletproto.prototype.size = V(8, 8);

    Bulletproto.prototype.isoffscreen = function() {
      return this.pos.y < 0 || this.pos.y > 360;
    };

    Bulletproto.prototype.tick = function() {
      this._pixisprite.texture = _selectframe(this.tiles, 2);
      this.physmove();
      if (this.isoffscreen()) {
        return this.kill();
      }
    };

    return Bulletproto;

  })(Entity);

  Bullet = (function(superClass) {
    extend(Bullet, superClass);

    function Bullet() {
      return Bullet.__super__.constructor.apply(this, arguments);
    }

    Bullet.prototype.init = function() {
      this.anim = new Animation({
        tileset: projectiles,
        framecount: 4,
        framedelay: 1
      });
      return this.tiles = sparkletiles;
    };

    Bullet.prototype.render_ = function() {
      this.anim.frameoffset = 1 + (this.shootmode - 1) * 5;
      return this.texset(this.anim.tex());
    };

    return Bullet;

  })(Bulletproto);

  BadBullet = (function(superClass) {
    extend(BadBullet, superClass);

    function BadBullet() {
      return BadBullet.__super__.constructor.apply(this, arguments);
    }

    BadBullet.prototype.init = function() {
      return this.tiles = pollentiles;
    };

    return BadBullet;

  })(Bulletproto);

  BadSuperBullet = (function(superClass) {
    extend(BadSuperBullet, superClass);

    function BadSuperBullet() {
      return BadSuperBullet.__super__.constructor.apply(this, arguments);
    }

    BadSuperBullet.prototype.init = function() {
      this.vel = V(0, 2);
      return this.tiles = sparkletiles;
    };

    return BadSuperBullet;

  })(BadBullet);

  BadBullet.prototype.die_on = [PlayerFairy, Barrier, Bullet];

  Bullet.prototype.die_on = [InvaderBee, Barrier, BadBullet];

  Barrier.prototype.die_on = [Bullet];

  InvaderBee.prototype.die_on = [Bullet, PlayerFairy];

  PowerUp = (function(superClass) {
    extend(PowerUp, superClass);

    function PowerUp() {
      return PowerUp.__super__.constructor.apply(this, arguments);
    }

    PowerUp.prototype.size = V(8, 8);

    PowerUp.prototype.init = function() {
      this.vel = V(0, 2);
      return this.shootmode = 1 + mafs.randint(3);
    };

    PowerUp.prototype.sprite = "sparkleshot";

    PowerUp.prototype.tick = function() {
      this.physmove();
      if (this.isoffscreen()) {
        return this.kill();
      }
    };

    PowerUp.prototype.coll = function(ent) {
      if (ent instanceof PlayerFairy) {
        this.kill();
        ent.powerup(this.shootmode);
        return ent.timers.mana -= 128;
      }
    };

    PowerUp.prototype.render_ = function() {
      var offs;
      offs = (this.shootmode - 1) * 5;
      projectiles = maketiles(_TEXBYNAME("projectiles"), 16, 5, 3);
      return this.texset(projectiles[offs]);
    };

    return PowerUp;

  })(Entity);

  Hud = (function(superClass) {
    extend(Hud, superClass);

    function Hud() {
      return Hud.__super__.constructor.apply(this, arguments);
    }

    Hud.prototype.sprite = "sparkleshot";

    Hud.prototype.init = function() {
      return this.pos = V(64, 360);
    };

    Hud.prototype.render = function() {
      var mana, maxmana;
      mana = WORLD.playerent.timers.mana;
      maxmana = 1100;
      this.anchor = V(0, 0);
      if (this._pixisprite == null) {
        this._pixisprite = new PIXI.extras.TilingSprite(_TEXBYNAME(this.sprite));
      }
      deepExtend(this._pixisprite, {
        pivot: VTOPP(V(0, 0)),
        width: (maxmana - mana) / 4,
        height: 16,
        tilePosition: {
          x: WORLD.tickno / 8
        }
      });
      return Hud.__super__.render.call(this);
    };

    return Hud;

  })(Entity);

  PlayerFairy.prototype.shootthebullet = function(num) {
    var _shoot, len1, o, shotpattern, vel;
    shotpattern = [V(0, -8), V(2, -7), V(-2, -7)];
    if (this.timers.shoot || (this.timers.mana > 1000)) {
      return;
    }
    playsound("boip.wav");
    this.timers.mana += 64;
    WORLD.stats.shots += num;
    _shoot = (function(_this) {
      return function(vel, offs) {
        if (offs == null) {
          offs = V();
        }
        return WORLD.entAdd(new Bullet({
          pos: _this.pos.vadd(offs),
          vel: vel,
          shootmode: _this.shootmode
        }));
      };
    })(this);
    if (num === 1) {
      _shoot(V(this.vel.x / 2, -10));
      this.timers.shoot = 8;
    }
    if (num === 2) {
      _shoot(V(0, -6), V(-8));
      _shoot(V(0, -6), V(8));
      this.timers.shoot = 16;
    }
    if (num === 3) {
      for (o = 0, len1 = shotpattern.length; o < len1; o++) {
        vel = shotpattern[o];
        _shoot(vel);
      }
      this.timers.shoot = 16;
    }
  };

  (animate = function() {
    renderer.render(stage);
    return requestAnimationFrame(animate);
  })();

  WORLD.mainloop = function() {
    if (!settings.paused) {
      WORLD.tick();
    } else {
      pausePlane.tick();
    }
    return setTimeout(WORLD.mainloop, hz(settings.fps));
  };

  World.prototype.reset = function() {
    this.entities = [];
    stage = new PIXI.Graphics();
    _decorate(stage);
    return this.init();
  };

  WORLD.titleinit = function() {
    var x;
    _decorate(stage);
    _blat("a game what contains some bees");
    x = _blat("press R to play");
    x.pos.y += 128;
    return flowerline();
  };

  flowerline = function() {
    return [0, 1, 2, 3, 4].forEach(function(i) {
      WORLD.entAdd(new Barrier({
        pos: V(32 + i * 16, 300)
      }));
      WORLD.entAdd(new Barrier({
        pos: V(32 * 5 + i * 16, 300)
      }));
      return WORLD.entAdd(new Barrier({
        pos: V(32 * 9 + i * 16, 300)
      }));
    });
  };

  beeline = function() {
    var o, results1;
    return (function() {
      results1 = [];
      for (o = 0; o < 32; o++){ results1.push(o); }
      return results1;
    }).apply(this).forEach(function(i) {
      var b;
      b = new InvaderBee;
      b.pos.x = 32 * (i % 8);
      b.pos.y = Math.floor(i / 8) * 32;
      return WORLD.entAdd(b);
    });
  };

  WORLD.init = function() {
    var em;
    this.tickno = 0;
    flowerline();
    beeline();
    em = new PlayerFairy;
    em.pos = V(64, 320);
    WORLD.entAdd(em);
    WORLD.playerent = em;
    WORLD.entAdd(new Hud);
    this.winstate = false;
    return WORLD.stats = {
      shots: 0,
      hits: 0
    };
  };

  PIXI.loader.load(function() {
    WORLD.titleinit();
    return WORLD.mainloop();
  });

  $(renderer.view).contextmenu(function() {
    return false;
  });


  /*
  exports
   */

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  jame.WORLD = WORLD;

  root.jame = jame;

  root.stage = stage;

  SelectIndicator = (function(superClass) {
    extend(SelectIndicator, superClass);

    function SelectIndicator(menu) {
      var k, v;
      SelectIndicator.__super__.constructor.call(this);
      this.menu = (function() {
        var results1;
        results1 = [];
        for (k in menu) {
          v = menu[k];
          results1.push(v);
        }
        return results1;
      })();
      this.option = 0;
      this.numoptions = this.menu.length;
      this.anchor = V(0, 0);
      this._pixisprite = maketext("->");
      this.pos.x -= 40;
      this.targetpos = V(0, 0);
      this.timers = {
        menudelay: new Timer(6)
      };
    }

    SelectIndicator.prototype.checkcontrols = function() {
      var tap;
      tap = (function(_this) {
        return function(key) {
          var cond;
          cond = jame.control.isHolding(key);
          if (cond) {
            _this.timers.menudelay.reset();
          }
          return cond;
        };
      })(this);
      if (!this.timers.menudelay.get()) {
        if (tap('Up')) {
          this.option--;
        }
        if (tap('Down')) {
          this.option++;
        }
        if (tap('Right')) {
          this.menu[this.option](+1);
          pausePlane.update();
        }
        if (tap('Left')) {
          this.menu[this.option](-1);
          pausePlane.update();
        }
        if (tap('Enter')) {
          return this.menu[this.option]();
        }
      }
    };

    SelectIndicator.prototype.tick = function() {
      this.timers.menudelay.tick();
      this.checkcontrols();
      this.option = mafs.mod(this.option, this.numoptions);
      this.targetpos.y = 32 + this.option * 32;
      return this.pos.y = linterpolate(this.pos.y, this.targetpos.y, 1 / 2);
    };

    return SelectIndicator;

  })(Renderable);

  sanitize_settings = function() {
    return settings.volume = mafs.clamp(settings.volume, 0, 1);
  };

  menu = {
    "return": function(i) {
      if (i > -2) {
        return;
      }
      return WORLD.pause();
    },
    "mute": function(i) {
      if (i === 0) {
        return "mute: " + (settings.muted ? "yes" : "no");
      }
      settings.muted = !settings.muted;
      ls.data.muted = settings.muted;
      return ls.save();
    },
    "volume": function(i) {
      if (i === 0) {
        return "volume: " + "|".repeat(settings.volume * 8);
      }
      if (i > 0) {
        settings.volume += 1 / 8;
      }
      if (i < 0) {
        settings.volume -= 1 / 8;
      }
      sanitize_settings();
      console.log(settings.volume);
      return playsound("boip.wav");
    },
    "restart": function(i) {
      if (i > -2) {
        return;
      }
      settings.paused = false;
      return WORLD.reset();
    }
  };

  pausePlane = new World;

  pausePlane.init = function() {
    var e;
    pausePlane.entAdd(new SelectIndicator(menu));
    e = _text("PAUSED");
    e.pos.y = -32;
    pausePlane.entAdd(e);
    this.textents = [];
    return this.update();
  };

  pausePlane.update = function() {
    var e, k, len1, num, o, ref1, results1, text, v;
    num = 0;
    console.log(this);
    ref1 = this.textents;
    for (o = 0, len1 = ref1.length; o < len1; o++) {
      e = ref1[o];
      this.entRemove(e);
      console.log("deleted");
    }
    this.textents = [];
    results1 = [];
    for (k in menu) {
      v = menu[k];
      num++;
      text = v(0) || k;
      e = _text(text);
      e.pos.y = 32 * num;
      pausePlane.entAdd(e);
      results1.push(this.textents.push(e));
    }
    return results1;
  };

  pausePlane.reset = function() {
    this.cleanup();
    return this.entities = [];
  };

  pausePlane.cleanup = function() {
    return this.entities.forEach(function(ent) {
      stage.removeChild(ent._pixisprite);
      return typeof ent._cleanup === "function" ? ent._cleanup() : void 0;
    });
  };

  WORLD.pause = function() {
    settings.paused = !settings.paused;
    pausePlane.reset();
    if (settings.paused) {
      return pausePlane.init();
    }
  };

  _text = function(text) {
    var ent, textcontainer;
    ent = new Renderable();
    ent.anchor = V(0, 0);
    textcontainer = maketext(text);
    ent._pixisprite = textcontainer;
    return ent;
  };

}).call(this);

//# sourceMappingURL=game.js.map
